<?lc
   /* =  DESCRIPTION  =
   --
   The podcast.lc controller can be found at: echo.lc
   Here is some test help

   Below we declare the global variables gControllerHandlers AND gData
   And put the public method names that we wish to expose into gControllerHandlers
   --
   */
   
   global gControllerHandlers, gData
   
   put "findPodcast,updateRecent,importEpisode,findEpisode,findEpisodeInPodcast,importPodcast,index,rss,podcast" into gControllerHandlers

   
   /* ==  INITIALISATION  ==
   --
   Put all the handlers and variables that you wish to merge into your views
   into the global array "gData".

   Write any initialisation statements (loading any neeeded libraries for instance)
   into the initialisation handler "podcast.lc" below.
   --
   */

   command podcast
      start using stack (gAPPPATH & "stacks/lib_Date.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_Encoding.livecode")
      start using stack (gAPPPATH & "stacks/lib_Fedwiki.livecode")
      start using stack (gAPPPATH & "stacks/lib_Feed.livecode")
      start using stack (gAPPPATH & "stacks/lib_ListenNotes.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_PageArray.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_PageSection.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_XML.livecode")
      start using stack (gAPPPATH & "stacks/model_PageArray.livecodescript")
   end podcast
   

   /* ==  CODE  ==
   --
   Here we put the public handlers the controller uses and exposes as urls.
   --
   */
   
   on index
      put fedwiki_GetDroppedUrl() into droppedURL
      switch
         case qEnd is among the items of "ogg,mp3,m4A,wav"
            put pageArray_Construct ("Dropped Audio", "Drag audio file to anothe page...") into pageArray
            put fedwiki_ConstructImageCaption ("Dropped audio", droppedURL) into audioCaption
            pageArray_AddAudio pageArray, droppedURL, audioCaption
            fedwiki_ReturnPageArray pageArray
            break
         case matchtext (droppedURL, "https://www.listennotes.com/podcasts/(.+)/(.+)", podcastSlug, episodeSlug)
            put listenNotes_PageArrayFromScrape (droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchtext (droppedURL, "https://www.listennotes.com/podcasts/(.+)", podcastSlug)
            -- fedwiki_ForwardAndReturn "https://rest.livecode.world/bbc/listenNotes"
            put listenNotes_ScrapePodcastID (droppedURL) into podcastID
            put listenNotes_FetchPodcastPageArray (podcastID) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         default
            fedwiki_ExitAndReturnError "Dropped url is not a ListenNotes url I recognise. :(", "Error"
      end switch
   end index
   
   on rss
      put _RssPageArray() into pageArray
      fedwiki_ReturnPageArray pageArray
   end rss
   
   private function _RssPageArray
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["rssURL"] into rssURL
      if rssURL is empty then
         put "RSS url is empty!" & CR&CR & the keys of postedArray into mError
         fedwiki_ExitAndReturnError mError, "Problem with Import"
      end if
      
      put postedArray ["wikiDomain"] into wikiDomain
      put postedArray ["pageTitle"] into pageTitle
      put postedArray ["rssLastUpdated"] into rssLastUpdated
      put postedArray ["displayStyle"] into displayStyle
      put postedArray ["cleanHow"] into cleanHow
      --
      put rss_GetPageArray (rssURL, rssLastUpdated, pageTitle, wikiDomain, displayStyle, cleanHow) into pageArray
      return pageArray
   end _RssPageArray
   
   on findEpisode
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["search_Term"] into searchTerm
      if searchTerm is empty then fedwiki_ExitAndReturnError "Search term is empty!", "Problem with search"
      
      put listenNotes_EpisodeSearchPageArray (searchTerm) into pageArray
      fedwiki_ReturnPageArray pageArray
   end findEpisode
   
   on findEpisodeInPodcast
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["search_Term"] into searchTerm
      if searchTerm is empty then fedwiki_ExitAndReturnError "Search term is empty!", "Problem with search"
      put postedArray ["podcastID"] into podcastID
      if podcastID is empty then fedwiki_ExitAndReturnError "PodcastID is empty!", "Problem with search"
      
      put listenNotes_FindEpisode (searchTerm, podcastID) into foundEpisodeData
      put listenNotes_FoundPageArray (foundEpisodeData) into pageArray
      fedwiki_ReturnPageArray pageArray
   end findEpisodeInPodcast
   
   on importEpisode
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["episodeID"] into episodeID
      if episodeID is empty then
         put merge ("This transporter cannot be used for this operation!") into errorText
         fedwiki_ExitAndReturnError errorText, "Not a ListenNotes Episode"
      end if
      
      put listenNotes_ConstructEpisodePageArray (episodeID) into pageArray
      fedwiki_ReturnPageArray pageArray
   end importEpisode
   
   on importPodcast
      -- the first after a search
      -- Used by wiki-button displayed on generated "Found Podcast" page
      
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["podcastID"] into podcastID
      -- put "8f0714068478481192cf9553881463d9" into podcastID
      --
      if podcastID is empty then
         put merge ("This transporter cannot be used for this operation!") into errorText
         fedwiki_ExitAndReturnError errorText, "Not a Fedwiki URL"
      end if
      --
      put listenNotes_FetchPodcastPageArray (podcastID) into pageArray
      fedwiki_ReturnPageArray pageArray
   end importPodcast
   
   on updateRecent
      /*
      put "Babbage from Economist Radio" into pageTitle
      put "43e615fb2f0646d3b02a58a751cd6bd1" into podcastID
      */
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["pageTitle"] into pageTitle
      put postedArray ["podcastID"] into podcastID
      --
      if podcastID is empty then
         put merge ("This transporter requires and podcast id and cannot be used for this operation!") into errorText
         fedwiki_ExitAndReturnError errorText, "Transport Error"
      end if
      --
      put listenNotes_FetchUpdatesPodcastPageArray (podcastID, pageTitle) into pageArray
      fedwiki_ReturnPageArray pageArray
   end updateRecent
   
   on findPodcast
      put fedwiki_GetDroppedArray() into postedArray
      put postedArray ["search_Term"] into searchTerm
      -- put "Economist" into searchTerm
      --
      if searchTerm is empty then
         put merge ("This transporter cannot be used for this operation!") into errorText
         fedwiki_ExitAndReturnError errorText, "Not a Fedwiki URL"
      end if
      --
      put "Here is a list of some podcasts I found with these search terms..." into someMarkdown
      put pageArray_Construct ("Found Podcasts", someMarkdown) into pageArray
      --
      put listenNotes_FindPodcast (searchTerm) into resultArray
      put resultArray ["results"] into paginatedResultArray
      repeat with itemNum = 1 to item 2 of the extents of paginatedResultArray
         put paginatedResultArray [itemNum] into itemArray
         --
         put itemArray ["title_original"] into podcastTitle
         put itemArray ["id"] into podcastID
         --
         put podcast_ConstructButton (podcastTitle, podcastID, false) into btnHTML
         pageArray_AddHtml pageArray, btnHTML
      end repeat
      --
      fedwiki_ReturnPageArray pageArray
   end findPodcast

?>