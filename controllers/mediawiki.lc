<?lc
   /* =  DESCRIPTION  =
   --
   The mediawiki.lc controller can be found at: mediawiki.lc
   Here is some test help
   Below we declare the global variables gControllerHandlers AND gData
   And put the public method names that we wish to expose into gControllerHandlers
   --
   */
   
   global gControllerHandlers, gData
   
   put "index,search,section,favicon,wikipage,importSection,mediawiki" into gControllerHandlers

   
   /* ==  INITIALISATION  ==
   --
   Put all the handlers and variables that you wish to merge into your views
   into the global array "gData".

   Write any initialisation statements (loading any neeeded libraries for instance)
   into the initialisation handler "mediawiki.lc" below.
   --
   */

   command mediawiki
      start using stack (gAPPPATH & "stacks/lib_MediaWiki.livecode")
      start using stack (gAPPPATH & "stacks/lib_Fedwiki.livecode")
      start using stack (gAPPPATH & "stacks/lib_WikiSandbox.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_FedWikiPedia.livecode")
      start using stack (gAPPPATH & "stacks/lib_WikiCommons.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_WikiVideo.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_WikiRestBase.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_WikipediaSections.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_Wikipedia.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_FedwikiCreate.livecodescript")
      start using stack (gAPPPATH & "stacks/model_PageArray.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_WikiPageArray.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_PageArray.livecodescript")
      start using stack (gAPPPATH & "stacks/lib_Xkcd.livecodescript")
   end mediawiki
   

   /* ==  CODE  ==
   --
   Here we put the public handlers the controller uses and exposes as urls.
   --
   */
   
   on index
      fedwiki_SetDroppedInfo dropJSON, droppedURL, droppedHTML, droppedText
      put the result into dropArray
      put fedwiki_IsFaviconDrop (dropJSON) into isFavicon
      switch
         case isFavicon
            favicon
            break
         case matchText (droppedURL, "https://(.+).wikipedia.org/wiki/File:(.+)", wikiLanguage, shortImageFile)
         case matchText (droppedURL, "https://(.+).wikipedia.org/wiki/(.+)#/media/File:(.+)", wikiLanguage, wikiSlug, shortImageFile)
            put wikicommons_FetchImagePageJson (shortImageFile) into pageJSON
            fedwiki_ReturnJSON pageJSON
            break
         case matchText (droppedURL, "^https:\/\/(..)\.wikipedia.org\/w\/index.php\?title=(.+)&action=edit&section=(.+)$", someLang, pageTitle, sectionNum)
            put wikicommons_ConstructSectionPageArray (pageTitle, sectionNum, droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://sterbalssundrystudies.miraheze.org/wiki/(.+)", wikiSlug)
         case matchText (droppedURL, "http://wiki.p2pfoundation.net/(.+)", wikiSlug)
         case matchText (droppedURL, "https://rationalwiki.org/wiki/(.+)", wikiSlug)
         case matchText (droppedURL, "https://www.explainxkcd.com/wiki/index.php/(.+)", wikiSlug)
         case matchText (droppedURL, "https://(.+).bitcoin.it/wiki/(.+)", wikiLanguage, wikiSlug)
         case matchText (droppedText, "https://(.+).wikipedia.org/wiki/(.+)", wikiLanguage, wikiSlug)
         case matchText (droppedURL, "https://(.+).wikipedia.org/wiki/(.+)", wikiLanguage, wikiSlug)
            wikipage droppedURL
            break
         case matchText (droppedURL, "https://commons.wikimedia.org/wiki/(File:.+.ogg)", shortAudioFile)
            put "An audio from the commons..." into someText
            put wikicommons_ConstructAudioPageArray ("Wikimedia Audio", someText, droppedURL, shortAudioFile) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://commons.wikimedia.org/wiki/(File:.+.ogv)", shortVideoFile)
         case matchText (droppedURL, "https://commons.wikimedia.org/wiki/(File:.+.webm)", shortVideoFile)
            put "A video from the commons..." into someText
            put wikicommons_ConstructVideoPageArray ("Wikimedia Video", someText, droppedURL, shortVideoFile) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://commons.wikimedia.org/wiki/(File:.+)", shortImageFile)
            -- put wikicommons_FetchBasicTwoImagePageArray (shortImageFile, pPageTitle, pSomeText, droppedURL) into pageArray
            put "Wikimedia Image" into pageTitle
            put "Drag these images to your source page..." into someText
            put fedwiki_ConstructPageArray (pageTitle, someText) into pageArray   
            wikicommons_FetchAndAddTwoImages pageArray, shortImageFile
            fedwiki_CleanJournal pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case droppedText is empty and droppedHtml contains "https://upload.wikimedia.org/wikipedia/commons/thumb/"  -- a thumbnail
            thumbNail droppedHtml
            break
         default
            fedwiki_ForwardAndReturn "https://rest.livecode.world/echo"
      end switch
   end index
   
   on search
      /*
      Following a favicon drop from a fedwiki page onto the imagine transport
      The value of the wikislug is posted to "https://rest.fedwiki.org/imagine/search"
      
      Dropped favicons do not contain all the information needed in the wiki page title - just the fedwiki-slug
      So we need to hack and search for a good match. There will be some wrong matches returned.
      
      We could search for existing pages - and get the realt title from there if such a page exists.
      but we often use ghost pages that are not yet saved on the server:
      -- put fedwiki_FindTitleFromSlug (siteMapArray) into pageTitle
      */
      
      put fedwiki_GetDroppedArray() into postArray
      put postArray ["url"] into postURL
      set the itemdelimiter to slash
      put item 3 of postURL into wikiDomain
      put postArray ["text"] into fedwikiSlug
      --
      put fedwiki_PageJsonUrl (wikiDomain, fedwikiSlug) into jsonURL 
      fedwiki_TestJsonUrl jsonURL, pageTitle, storyArray, journalArray
      if the result is true then
         mediawiki_NormaliseTitle pageTitle, pageTitle, pageID
      else
         mediawiki_NormaliseTitle fedwikiSlug, pageTitle, pageID
      end if
      
      put mediawiki_FetchPageArray (wikipediaURL) into pageArray
      fedwiki_ReturnPageArray pageArray
   end search
   
   on wikipage
      put fedwiki_GetDroppedUrl() into droppedURL
      switch
         case matchText (droppedURL, "http://wiki.p2pfoundation.net/(.+)", wikiSlug)
            put mediawiki_FetchPageArrayWithParse (wikiSlug, empty, "http://wiki.p2pfoundation.net/api.php?", droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break  
         case matchText (droppedURL, "https://www.explainxkcd.com/wiki/index.php/(.+)", wikiSlug)
            put xkcd_FetchPageArray (droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://rationalwiki.org/wiki/(.+)", wikiSlug)
            put mediawiki_FetchPageArrayWithParse (wikiSlug, empty, "https://rationalwiki.org/w/api.php?", droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://(.+).bitcoin.it/wiki/(.+)", wikiLanguage, wikiSlug)
            put mediawiki_FetchPageArrayWithParse (wikiSlug, empty, "https://en.bitcoin.it/w/api.php?", droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://sterbalssundrystudies.miraheze.org/wiki/(.+)", wikiSlug)
            put mediawiki_FetchPageArrayWithParse (wikiSlug, empty, "https://sterbalssundrystudies.miraheze.org/w/api.php?", droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         case matchText (droppedURL, "https://(.+).wikipedia.org/wiki/(.+)", wikiLanguage, wikiSlug)
            put mediawiki_FetchPageArray (droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         default
            put fedwiki_ConstructErrorJSON ("Not a Wikipedia page!" && droppedURL) into pageJSON
            fedwiki_ReturnJSON pageJSON
      end switch
   end wikipage
   
   on favicon
      fedwiki_SetDroppedFaviconInfo fedwikiSlug, fedwikiDomain
      mediawiki_NormaliseTitle fedwikiSlug, pageTitle, pageID
      -- put wikipedia_ConstructURL (pageTitle) into wikipediaURL
      -- replace space with "_" in pageSlug
      put "https://en.wikipedia.org/wiki/" & pageTitle into wikipediaUrl
      -- put fedwiki_ConstructPageArray ("Test", wikipediaURL) into pageArray
      put the result into batchArray
      put mediawiki_FetchPageArray (wikipediaURL) into pageArray
      fedwiki_ReturnPageArray pageArray
   end favicon
   
   on importSection
      -- section droppedURL or a section form
      fedwiki_SetDroppedInfo dropJSON, droppedURL, droppedHTML, droppedText
      put the result into dropArray
      put dropArray ["section_title"] into newPageTitle
      
      put "^https:\/\/(..)\.wikipedia.org\/w\/index.php\?title=(.+)&action=edit&section=(.+)$" into someReg
      if matchText (droppedURL, someReg, someLang, pageSlug, sectionNum) is true then
         -- put fedwikipedia_FetchSectionSummaryPageArray (pageSlug, sectionNum) into pageArray
         put wikicommons_ConstructSectionPageArray (pageSlug, sectionNum, droppedURL) into pageArray
         if newPageTitle is not empty then
            fedwiki_RenamePage pageArray, newPageTitle
         end if
         fedwiki_ReturnPageArray pageArray
      else
         put fedwiki_ConstructErrorJSON ("Not a Wikipedia edit link!" && droppedURL) into pageJSON
         fedwiki_ReturnJSON pageJSON
      end if
   end importSection
   
   on section
      -- imports multiple subsections
      put fedwiki_GetDroppedUrl() into droppedURL
      switch
         case matchText (droppedURL, "^https:\/\/(..)\.wikipedia.org\/w\/index.php\?title=(.+)&action=edit&section=(.+)$", someLang, pageTitle, sectionNum)
            -- uses restbase api's
            put wikicommons_ConstructSectionPageArray (pageTitle, sectionNum, droppedURL) into pageArray
            fedwiki_ReturnPageArray pageArray
            break
         default
            put fedwiki_ConstructErrorJSON ("Not a Wikipedia edit link!" && droppedURL) into pageJSON
            fedwiki_ReturnJSON pageJSON
      end switch
   end section
   
   command thumbNail droppedHTML
      put fedwikipedia_ExtractShortImageFile (droppedHTML) into shortImageFile
      put wikicommons_FetchBasicTwoImagePageArray (shortImageFile) into pageArray
      put json_FromArray (pageArray) into pageJSON
      --
      fedwiki_ReturnJSON pageJSON
   end thumbNail

?>